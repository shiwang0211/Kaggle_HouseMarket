}
}
return = paste(al[result], collapse = "")
print return
}
easyCrypto('abc')
easyCrypto <- function(x,print=T){
al <- c(LETTERS,tolower(LETTERS)) # form a list of letters
x_l <- strsplit(x,"") # split words in letters
result <-c()
for (i in 1:nchar(x)){
for (j in 1:length(al)){
if (x_l[[1]][i]== al[j])
{ if (j%%2==1)
{result[i]<-j+1} else{
result[i] <- j-1}
}
}
}
return = paste(al[result], collapse = "")
print paste(al[result], collapse = "")
}
easyCrypto('abc')
easyCrypto <- function(x,print=T){
al <- c(LETTERS,tolower(LETTERS)) # form a list of letters
x_l <- strsplit(x,"") # split words in letters
result <-c()
for (i in 1:nchar(x)){
for (j in 1:length(al)){
if (x_l[[1]][i]== al[j])
{ if (j%%2==1)
{result[i]<-j+1} else{
result[i] <- j-1}
}
}
}
return = paste(al[result], collapse = "")
print(paste(al[result], collapse = ""))
}
easyCrypto('abc')
easyCrypto('ZOO')
x_l <- strsplit('Selfscore',"")
x_l
library(plyr)
count(x_l)
asam <- c('a','b','c','c')
count(asam)
for i in (1: nchar(x)){
listA[i] <- x_l[[1]][i]
}
listA <-c()
listA[i] <- x_l[[1]][i]
for i in (1: nchar(x)){
listA <-c()
listA[i] <- x_l[[1]][i]
}
for (i in 1: nchar(x)) {
listA <-c()
listA[i] <- x_l[[1]][i]
}
listA[i]
listA
x_l[[1]][i]
x_l[[1]]
x <- 'Selfscore'
x_l <-strsplit(x,"")
library(plyr)
for (i in 1: nchar(x)) {
listA <-c()
listA[i] <- x_l[[1]][i]
}
listA
x_l
x_l[[1]][1]
x_l[[1]][1][2]
x_l[[1]][2]
for (i in 1: nchar(x)) {
listA[i] <- x_l[[1]][i]
}
listA
counts(listA)
count(listA)
df <- data.fram(count(listA))
df <- data.frame(count(listA))
df
df <- df[order(df$x),]
df
print (df[order(df$x),])
# R
mapReduce <-function(x,print=T){
library(plyr) # R package for "count" function
x_l <-strsplit(x,"") #split words
listA <-c()
for (i in 1: nchar(x)) {
listA[i] <- x_l[[1]][i]
}
count(listA)
df <- data.frame(count(listA))
return <- df[order(df$x),] # by alphabetic order
print (df[order(df$x),])
}
mapReduce('Selfscore')
mapReduce <-function(x,print=T){
library(plyr) # R package for "count" function
x<-tolower(x) # not case sensitive
x_l <-strsplit(x,"") #split words
listA <-c()
for (i in 1: nchar(x)) {
listA[i] <- x_l[[1]][i]
}
count(listA)
df <- data.frame(count(listA))
return <- df[order(df$x),] # by alphabetic order
print (df[order(df$x),])
}
mapReduce('Selfscore')
install.packages("igraph")
library(graph)
install.packages("graph")
g1 = randomEGraph(LETTERS[1:15], edges=100)
library(graph)
updateR()
alpha.centrality(graph, nodes=V(graph), alpha=1, loops=FALSE,
exo=1, weights=NULL, tol=1e-7, sparse=TRUE)
dat<-rgraph(10)
install.packages("sna")
library(sna)
dat<-rgraph(10)
data
dat
degree(dat,cmode="indegree")
degree(dat)
gra<-rgraph(10)
graphCentrality <- function(gra,print=T){
library(igraph)
library(sna)
deg <- degree(gra) # degree centrality scores
clo <- closeness(gra) # closeness centrality
bet <- betweenness(gra)
print(deg)
print(clo)
print(bet)
}
graphCentrality(gra)
deg <- degree(gra)
gra
degree(gra)
centralization.degree(g)
g <- ba.game(1000, m=4)
g <- ba.game(1000, m=4)
centralization.degree(g)
gra <- ba.game(1000, m=4)
graphCentrality <- function(x,print=T){
library(igraph)
library(sna)
deg <- degree(gra) # degree centrality scores
clo <- closeness(gra) # closeness centrality
bet <- betweenness(gra)
print(deg)
print(clo)
print(bet)
}
graphCentrality(gra)
deg
degree(gra)
gra <- ba.game(10, m=4)
degree(gra)
clo <- closeness(gra)
clo
centralization.closeness(g, mode="all")$centralization
centralization.closeness(g, mode="all")
centralization.closeness(gra, mode="all")
clo
bet <- betweenness(gra)
bet
deg <- centralization.degree(gra) # degree centrality scores
deg
gra <- ba.game(10, m=4)
graphCentrality(gra)
graphCentrality <- function(x,print=T){
library(igraph)
deg <- centralization.degree(x) # degree centrality scores
clo <- centralization.closeness(x) # closeness centrality
bet <- centralization.betweenness(x)
print(deg)
print(clo)
print(bet)
}
gra <- ba.game(10, m=4)
graphCentrality(gra)
deg <- centralization.degree(x)
x <- gra
deg <- centralization.degree(x)
deg
deg$centralization
graphCentrality <- function(x,print=T){
library(igraph)
deg <- centralization.degree(x) # degree centrality scores
clo <- centralization.closeness(x) # closeness centrality
bet <- centralization.betweenness(x)
print(deg$centralization)
print(clo$centralization)
print(bet$centralization)
}
gra <- ba.game(10, m=4)
graphCentrality(gra)
graphCentrality <- function(x,print=T){
library(igraph)
deg <- centralization.degree(x) # degree centrality scores
clo <- centralization.closeness(x) # closeness centrality
bet <- centralization.betweenness(x)
print(paste("degree" ,deg$centralization)
print(clo$centralization)
print(bet$centralization)
}
gra <- ba.game(10, m=4)
graphCentrality(gra)
graphCentrality <- function(x,print=T){
library(igraph)
deg <- centralization.degree(x) # degree centrality scores
clo <- centralization.closeness(x) # closeness centrality
bet <- centralization.betweenness(x)
print(paste("degree" ,deg$centralization))
print(clo$centralization)
print(bet$centralization)
}
gra <- ba.game(10, m=4)
graphCentrality(gra)
graphCentrality <- function(x,print=T){
library(igraph)
deg <- centralization.degree(x) # degree centrality scores
clo <- centralization.closeness(x) # closeness centrality
bet <- centralization.betweenness(x)
print(paste("degree" ,deg$centralization))
print(paste("closeness", clo$centralization))
print(paset("betweenness",bet$centralization))
}
gra <- ba.game(10, m=4)
graphCentrality(gra)
graphCentrality <- function(x,print=T){
library(igraph)
deg <- centralization.degree(x) # degree centrality scores
clo <- centralization.closeness(x) # closeness centrality
bet <- centralization.betweenness(x)
print(paste("degree" ,deg$centralization))
print(paste("closeness", clo$centralization))
print(paste("betweenness",bet$centralization))
}
gra <- ba.game(10, m=4)
graphCentrality(gra)
graphCentrality <- function(x,print=T){
library(igraph)
deg <- centralization.degree(x) # degree centrality scores
clo <- centralization.closeness(x) # closeness centrality
bet <- centralization.betweenness(x)
print(paste("degree" ,deg$centralization))
print(paste("closeness", clo$centralization))
print(paste("betweenness",bet$centralization))
}
graphCentrality(graph)
ablone
abalone
data(abalone)
installed.packages("PivotalR")
library(PivotalR)
installed.packages("PivotalR")
data(abalone)
source("http://www.stat.ucla.edu/~cocteau/stat13/data/ab.R")
ls()
?source()
url <- 'http://archive.ics.uci.edu/ml/machine-learning-databases/abalone/abalone.data'
abalone <- read.table(url, sep=",", row.names=NULL, col.names=abalone.cols,
nrows=4177)
abalone.cols = c("sex", "length", "diameter", "height", "whole.wt",
"shucked.wt", "viscera.wt", "shell.wt", "rings")
url <- 'http://archive.ics.uci.edu/ml/machine-learning-databases/abalone/abalone.data'
abalone <- read.table(url, sep=",", row.names=NULL, col.names=abalone.cols,
nrows=4177)
abalone.cols = c("sex", "length", "diameter", "height", "whole.wt",
"shucked.wt", "viscera.wt", "shell.wt", "rings")
url <- 'http://archive.ics.uci.edu/ml/machine-learning-databases/abalone/abalone.data'
abalone <- read.table(url, sep=",", row.names=NULL, col.names=abalone.cols,
nrows=4177)
abalone
str(abalone)
library(rpart)
# grow tree
fit <- rpart(Mileage~Price + Country + Reliability + Type,
method="anova", data=cu.summary)
cu.summary
printcp(fit) # display the results
printcp(fit) # display the results
plotcp(fit) # visualize cross-validation results
printcp(fit) # display the results
plotcp(fit) # visualize cross-validation results
summary(fit) # detailed summary of splits
# create additional plots
par(mfrow=c(1,2)) # two plots on one page
rsq.rpart(fit) # visualize cross-validation results
# plot tree
plot(fit, uniform=TRUE,
main="Regression Tree for Mileage ")
text(fit, use.n=TRUE, all=TRUE, cex=.8)
# create attractive postcript plot of tree
post(fit, file = "c:/tree2.ps",
title = "Regression Tree for Mileage ")
cu.summary
par(mfrow=c(1,1))
# plot tree
plot(fit, uniform=TRUE,
main="Regression Tree for Mileage ")
text(fit, use.n=TRUE, all=TRUE, cex=.8)
# create attractive postcript plot of tree
post(fit, file = "c:/tree2.ps",
title = "Regression Tree for Mileage ")
plot(fit, uniform=TRUE,
main="Regression Tree for Mileage ")
text(fit, use.n=TRUE, all=TRUE, cex=.8)
plot(fit, uniform=TRUE)#,
#main="Regression Tree for Mileage ")
text(fit, use.n=TRUE, all=TRUE, cex=.8)
library(rpart)
# grow tree
fit <- rpart(Kyphosis ~ Age + Number + Start,
method="class", data=kyphosis)
printcp(fit) # display the results
printcp(fit) # display the results
plotcp(fit) # visualize cross-validation results
summary(fit) # detailed summary of splits
# plot tree
plot(fit, uniform=TRUE,
main="Classification Tree for Kyphosis")
text(fit, use.n=TRUE, all=TRUE, cex=.8)
post(fit, file = "c:/tree.ps",
title = "Classification Tree for Kyphosis")
abalone.cols = c("sex", "length", "diameter", "height", "whole.wt",
"shucked.wt", "viscera.wt", "shell.wt", "rings")
url <- 'http://archive.ics.uci.edu/ml/machine-learning-databases/abalone/abalone.data'
abalone <- read.table(url, sep=",", row.names=NULL, col.names=abalone.cols,
nrows=4177)
attach(abalone)
attach(abalone)
detach(abalone)
detach(abalone)
mylm <- lm(rings~.,data = abalone)
library(MASS)
library(rms)
install.packages(rms)
install.packages("rms")
summary(abalone)
abalone
str(abalone)
abalone(height==0)
abalone[height==0,
]
abalone$height
sum(abalone$height==0)
mylm <- lm(rings~.,data = abalone)
lm1 <- lm(rings~.,data = abalone)
lm2 <- stepAIC(lm1)
summary(lm2)
authors <- data.frame(
surname = I(c("Tukey", "Venables", "Tierney", "Ripley", "McNeil")),
nationality = c("US", "Australia", "US", "UK", "Australia"),
deceased = c("yes", rep("no", 4)))
books <- data.frame(
name = I(c("Tukey", "Venables", "Tierney",
"Ripley", "Ripley", "McNeil", "R Core")),
title = c("Exploratory Data Analysis",
"Modern Applied Statistics ...",
"LISP-STAT",
"Spatial Statistics", "Stochastic Simulation",
"Interactive Data Analysis",
"An Introduction to R"),
other.author = c(NA, "Ripley", NA, NA, NA, NA,
"Venables & Smith"))
merge(authors, books, by.x = "surname", by.y = "name", all = TRUE)
x <- data.frame(k1 = c(NA,NA,3,4,5), k2 = c(1,NA,NA,4,5), data = 1:5)
y <- data.frame(k1 = c(NA,2,NA,4,5), k2 = c(NA,NA,3,4,5), data = 1:5)
View(x)
authors<-authors[1,]
authors
authors<-authors[,1]
books<-authors[,1]
authors <- data.frame(
surname = I(c("Tukey", "Venables", "Tierney", "Ripley", "McNeil")),
nationality = c("US", "Australia", "US", "UK", "Australia"),
deceased = c("yes", rep("no", 4)))
authors<-authors[,1]
books<-authors[,1]
authors <- data.frame(
surname = I(c("Tukey", "Venables", "Tierney", "Ripley", "McNeil")),
nationality = c("US", "Australia", "US", "UK", "Australia"),
deceased = c("yes", rep("no", 4)))
books <- data.frame(
name = I(c("Tukey", "Venables", "Tierney",
"Ripley", "Ripley", "McNeil", "R Core")),
title = c("Exploratory Data Analysis",
"Modern Applied Statistics ...",
"LISP-STAT",
"Spatial Statistics", "Stochastic Simulation",
"Interactive Data Analysis",
"An Introduction to R"),
other.author = c(NA, "Ripley", NA, NA, NA, NA,
"Venables & Smith"))
authors<-authors[,1]
books<-authors[,1]
authors
authors <- data.frame(
surname = I(c("Tukey", "Venables", "Tierney", "Ripley", "McNeil")),
nationality = c("US", "Australia", "US", "UK", "Australia"),
deceased = c("yes", rep("no", 4)))
books <- data.frame(
name = I(c("Tukey", "Venables", "Tierney",
"Ripley", "Ripley", "McNeil", "R Core")),
title = c("Exploratory Data Analysis",
"Modern Applied Statistics ...",
"LISP-STAT",
"Spatial Statistics", "Stochastic Simulation",
"Interactive Data Analysis",
"An Introduction to R"),
other.author = c(NA, "Ripley", NA, NA, NA, NA,
"Venables & Smith"))
authors<-authors[,1:2]
books<-books[,1:2]
match( c(1,3,5), c(2,6,7,3,1) )
?match
merge(authors, books, by.x = "surname", by.y = "name", all = TRUE)
?merge
merge(authors, books, by.x = "surname", all = TRUE)
merge(authors, books, by.x = "surname", by.y = F,all = TRUE)
merge(authors, books, by.x = "surname", all = TRUE)
View(authors)
View(books)
View(authors)
merge(authors, books, by.x = "surname", by.y= "name",all = TRUE, all.y=F)
merge(authors, books, by.x = "surname", by.y= "name",all = TRUE, all.y=F,all.x=F)
merge(authors, books, by.x = "surname", by.y= "name",all = F)
books <- data.frame(
name = I(c("Tukey", "Venables", "Tierney",
"Ripley", "Ripley", "McNeil", "R Core")),
title = c("Exploratory Data Analysis",
"Modern Applied Statistics ...",
"LISP-STAT",
"Spatial Statistics", "Stochastic Simulation",
"Interactive Data Analysis",
"An Introduction to R"),
other.author = c(NA, "Ripley", NA, NA, NA, NA,
"Venables & Smith"))
names(books)
books[names(books)="name"]
books[names(books)=="name"]
books[names(books)==c("name","title"]
books[names(books)==c("name","title")]
A<- books[names(books)=="name",names(books)=="title"]
A
]
A<- books[names(books)=="name"]
A
A<- books[names(books)=="name",]
A<- books[names(books)==c("name","title"),]
A<- books[names(books)=c("name","title"),]
a = [1,2,3,4,5]
unique(a)
a
a = c(1,2,3,4,5,6,7)
a
unique(a)
duplicate(a)
duplicated(a)
a = c(1,2,3,4,5,6,7,7)
unique(a)
replicated(a)
replicate(a)
duplicated(a)
length(unique(a))
length(a)-length(unique(a))
?predict
showmemethods('dist')
showMethods('dist')
library(rpart)
# grow tree
fit <- rpart(Kyphosis ~ Age + Number + Start,
method="class", data=kyphosis)
printcp(fit) # display the results
plotcp(fit) # visualize cross-validation results
summary(fit) # detailed summary of splits
# plot tree
plot(fit, uniform=TRUE,
main="Classification Tree for Kyphosis")
text(fit, use.n=TRUE, all=TRUE, cex=.8)
# create attractive postscript plot of tree
post(fit, file = "c:/tree.ps",
title = "Classification Tree for Kyphosis")
plotcp(fit) # visualize cross-validation results
printcp(fit) # display the results
plot(fit, uniform=TRUE,
main="Classification Tree for Kyphosis")
text(fit, use.n=TRUE, all=TRUE, cex=.8)
post(fit, file = "tree.ps",
title = "Classification Tree for Kyphosis")
getwd()
library(data.table)
library(dplyr)
install.packages('data.table')
library(data.table)
library(dplyr)
Raw_Train <- fread("./Raw Data/train.csv")
setwd("~/Dropbox (Personal)/house market/R Codes")
setwd("~/Dropbox (Personal)/house market/Raw Data")
setwd("~/Dropbox (Personal)/house market/Raw Data")
Raw_Train <- fread("./Raw Data/train.csv")
